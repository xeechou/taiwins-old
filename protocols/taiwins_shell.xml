<protocol name="taiwins">
  <interface name="nonapp_surface" version="1">
    <description summary="non application surface">
      a non application surface is static windows, which means they do not move
      or scale or close
    </description>

    <request name="registre">
      <description summary="register the non-application surface">
	report the share memory buffer for the static surface to the compositor
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="buffer"  type="object" interface="wl_buffer"/>
      <arg name="type" type="uint" enum="nonapp_surface.stage"
	   summary="which layer to draw"/>	
    </request>

    <enum name="stage">
      <description summary="stages to draw static surfaces">
	specific the order of drawing static surfaces. Since there is only
	send_to_back and bring_to_front api, what we can do is partition the
	static views, the top view get focused(It can be widget, or lock). This
	is a copy from the compositor side, whenever there changes, we
	change here as well.
      </description>
      <entry name="background" value="0"/>
      <entry name="panel" value="1"/>
      <entry name="partition" value="2"/>
      <entry name="widget" value="3"/>
      <entry name="lock" value="4"/>
      <entry name="nonapp_nstages" value="5"/>
    </enum>
  </interface>

  
  <interface name="taiwins_shell" version="1">
    <description summary="create desktop widgets and helpers">
      This protocol does simple things, eventually, this api should be able to
      implement xdg_shell.
    </description>

    <!--
    <request name="register_static_surface">
      <description summary="register the static surface(the surface that does
			    not move and long exists) for example, panel, background, lock, etc"/>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="surface" type="object" interface="wl_surface"/>
      <arg name="type"   type="uint"/>
      </request>
      -->
    <!-- maybe I should use static_surface, it sounds better? -->
    <request name="create_nonapp_surface">
      <description summary="create a non-application surface">
	We could create a panel, wallpaper in this way, maybe I should call them
	static surface? The resource it created is the unique identity to the server
      </description>
      <arg name="output" type="object" interface="wl_output"/>
      <arg name="id" type="new_id" interface="nonapp_surface" summary="create a
	non-app surface"/>
    </request>

    <!-- there is no way you can avoid panel, you need to call change workspace
	 something -->
<!-- 
  <enum name="cursor">

    <entry name="none" value="0"/>

    <entry name="resize_top" value="1"/>
    <entry name="resize_bottom" value="2"/>

    <entry name="arrow" value="3"/>

    <entry name="resize_left" value="4"/>
    <entry name="resize_top_left" value="5"/>
    <entry name="resize_bottom_left" value="6"/>

    <entry name="move" value="7"/>

    <entry name="resize_right" value="8"/>
    <entry name="resize_top_right" value="9"/>
    <entry name="resize_bottom_right" value="10"/>

    <entry name="busy" value="11"/>
  </enum>
-->
  </interface>

</protocol>
